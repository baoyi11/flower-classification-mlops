name: CI Pipeline

on:
  push:
    branches: [ main, dev, 'feature/**' ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:  # 允许手动触发
jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
    
    - name: Check code formatting
      run: |
        black --check src/ tests/ --verbose
    
    - name: Check import sorting
      run: |
        isort --check-only src/ tests/ --verbose
    
    - name: Lint code
      run: |
        flake8 src/ tests/ --verbose --show-source

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create sample data
      run: |
        python scripts/setup_sample_data.py
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v
    
    - name: Test MLflow functionality
      run: |
        python -c "
        import mlflow
        mlflow.set_tracking_uri('file:///tmp/mlruns')
        mlflow.set_experiment('github-actions-test')
        with mlflow.start_run():
            mlflow.log_param('test_param', 'github_actions')
            mlflow.log_metric('test_accuracy', 0.95)
        print('✅ MLflow integration test passed')
        "
    
    - name: Validate project structure
      run: |
        python scripts/validate_project.py